{
  "name": "Walking",
  "full_name": "org.dreambot.api.methods.walking.impl.Walking",
  "full_url": "https://dreambot.org/javadocs/org/dreambot/api/methods/walking/impl/Walking.html",
  "type": "class",
  "package": "org.dreambot.api.methods.walking.impl",
  "description": "A class containing every method you need to walk anywhere in the game. Some important terminology: Region: An in game region is a grid of 64x64 tiles Global: The global pathfinder (WebFinder) is used to find paths outside of the loaded regions Local: The local pathfinder (LocalPathFinder is used only for paths within the loaded regions Generally you shouldn't need to use the pathfinders directly assuming our web contains a path. Most walking in game can be accomplished simply with a call to walk(Tile) which will take one step towards the goal tile. You can call walk(Tile) repeatedly in your script's onLoop until you're close to your destination: Tile destination = new Tile(3270, 3167); if (destination.distance() > 5 && Walking.shouldWalk()) { Walking.walk(destination); }",
  "page_structure": {
    "type": "class",
    "format_version": "old",
    "has_summary_tables": true,
    "has_detail_sections": true,
    "has_nested_classes": false
  },
  "inheritance": [],
  "interfaces_implemented": [],
  "nested_classes": [],
  "methods": [
    {
      "name": "Tile",
      "return_type": "Tile",
      "modifiers": [
        "static",
        "@Nullable"
      ],
      "description": "Gets destination tile (red mini map flag).",
      "deprecated": false
    },
    {
      "name": "walk",
      "signature": "public static boolean walk\u200b(int x, int y)",
      "return_type": "",
      "modifiers": [],
      "description": "Walks to the tile at (x, y, 0)",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "clickTileOnMinimap",
      "signature": "public static boolean clickTileOnMinimap\u200b(@NonNull Tile tile)",
      "return_type": "",
      "modifiers": [],
      "description": "Clicks a tile on the minimap",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "walkOnScreen",
      "signature": "public static boolean walkOnScreen\u200b(@NonNull Tile tile)",
      "return_type": "",
      "modifiers": [],
      "description": "Clicks on a tile on the main game screen Note: This method will not handle obstacles like walk(Tile) does, it'll only click on the tile",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "walkExact",
      "signature": "public static boolean walkExact\u200b(@NonNull Tile tile)",
      "return_type": "",
      "modifiers": [],
      "description": "Attempts to walk to the exact tile",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "shouldWalk",
      "signature": "public static boolean shouldWalk\u200b(int distance)",
      "return_type": "",
      "modifiers": [],
      "description": "Returns whether you should walk - if you're moving, it'll check if your distance to destination is less than specified",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "toggleRun",
      "signature": "public static boolean toggleRun()",
      "return_type": "",
      "modifiers": [],
      "description": "Turns on/off run.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "isRunEnabled",
      "signature": "public static boolean isRunEnabled()",
      "return_type": "",
      "modifiers": [],
      "description": "Checks whether running is currently enabled via playerSettings.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getRunEnergy",
      "signature": "public static int getRunEnergy()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets the current run energy",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getClosestTileOnMap",
      "signature": "public static @Nullable Tile getClosestTileOnMap\u200b(@NonNull Tile tile)",
      "return_type": "",
      "modifiers": [],
      "description": "Returns the closest tile on the minimap to offset given tile. Will return null if isDisableMinimap().",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getClosestTileOnScreen",
      "signature": "public static @Nullable Tile getClosestTileOnScreen\u200b(@NonNull Tile tile)",
      "return_type": "",
      "modifiers": [],
      "description": "Returns the closest tile on the screen to offset given tile.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getRunThreshold",
      "signature": "public static int getRunThreshold()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets energy level which run will be toggled when using default walk methods.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "setRunThreshold",
      "signature": "public static void setRunThreshold\u200b(int runThreshold)",
      "return_type": "",
      "modifiers": [],
      "description": "Sets energy level which run will be toggled when using default walk methods.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getDestinationDistance",
      "signature": "public static int getDestinationDistance()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets the distance from the destination",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getDestination",
      "signature": "public static @Nullable Tile getDestination()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets destination tile (red mini map flag).",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "canWalk",
      "signature": "public static boolean canWalk\u200b(@NonNull Tile destination)",
      "return_type": "",
      "modifiers": [],
      "description": "Returns whether you are able to walk to the tile, only works with local tiles.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "setObstacleSleeping",
      "signature": "public static void setObstacleSleeping\u200b(boolean shouldSleep)",
      "return_type": "",
      "modifiers": [],
      "description": "Sets whether the walker should sleep after interacting with an obstacle Setting this to false may result in spam clicking obstacles",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "shouldObstacleSleep",
      "signature": "public static boolean shouldObstacleSleep()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets whether the walker should sleep after interacting with an obstacle",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "setGangplankHandling",
      "signature": "public static void setGangplankHandling\u200b(boolean active)",
      "return_type": "",
      "modifiers": [],
      "description": "Sets whether the walker should check for gangplanks before walking",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "shouldHandleGangplanks",
      "signature": "public static boolean shouldHandleGangplanks()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets whether the walker should check for gangplanks before walking",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "isStaminaActive",
      "signature": "public static boolean isStaminaActive()",
      "return_type": "",
      "modifiers": [],
      "description": "Checks if staminaactive.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "getMinimapTargetSize",
      "signature": "public static int getMinimapTargetSize()",
      "return_type": "",
      "modifiers": [],
      "description": "Gets the minimaptargetsize.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "setMinimapTargetSize",
      "signature": "public static void setMinimapTargetSize\u200b(int sizeInPx)",
      "return_type": "",
      "modifiers": [],
      "description": "Sets the size of MiniMapTileDestination's target area when minimap walking",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "reset",
      "signature": "public static void reset()",
      "return_type": "",
      "modifiers": [],
      "description": "Performs the reset operation.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "isNoClickWalkEnabled",
      "signature": "public static boolean isNoClickWalkEnabled()",
      "return_type": "",
      "modifiers": [],
      "description": "Checks whether the setting for no click walk is enabled or not",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "toggleNoClickWalk",
      "signature": "public static void toggleNoClickWalk\u200b(boolean toggle)",
      "return_type": "",
      "modifiers": [],
      "description": "Performs the toggleNoClickWalk operation.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "isDisableMinimap",
      "signature": "public static boolean isDisableMinimap()",
      "return_type": "",
      "modifiers": [],
      "description": "Checks if disableminimap.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    },
    {
      "name": "setDisableMinimap",
      "signature": "public static void setDisableMinimap\u200b(boolean disableMinimap)",
      "return_type": "",
      "modifiers": [],
      "description": "Sets the disableminimap.",
      "parameters": [],
      "return": {
        "type": "",
        "description": ""
      },
      "deprecated": false
    }
  ],
  "fields": [],
  "constructors": []
}