{
  "property_types": {
    "numeric": {
      "description": "Numeric values (integers or floating point)",
      "subtypes": {
        "integer": {
          "description": "Whole number values",
          "examples": [1, 10, 100, 1000],
          "special_values": {
            "All": "Used when referring to all items/quantities"
          }
        },
        "float": {
          "description": "Decimal number values",
          "examples": [0.5, 1.5, 10.75],
          "format_notes": "May require decimal point even for whole numbers in some contexts"
        }
      }
    },
    
    "string": {
      "description": "Text values",
      "formats": {
        "simple": {
          "description": "Basic text string",
          "examples": ["Bones", "Coins", "Dragon bones"]
        },
        "regex": {
          "description": "Regular expression pattern",
          "examples": ["Rune.*", "Dragon .*", "[A-Z].*"],
          "usage_notes": "Used with MATCHES_REGEX operator"
        }
      }
    },
    
    "boolean": {
      "description": "True/false values",
      "valid_values": [true, false],
      "format_notes": "Usually represented as checkboxes in PSC UI"
    },
    
    "coordinate": {
      "description": "X, Y, Z map coordinates",
      "format": {
        "x": "Integer X coordinate on the map",
        "y": "Integer Y coordinate on the map",
        "z": "Integer Z coordinate (plane/level)",
        "examples": [
          {"x": 3221, "y": 3218, "z": 0},
          {"x": 3165, "y": 3489, "z": 0}
        ]
      }
    },
    
    "variable_reference": {
      "description": "Reference to a variable in PSC",
      "format": "${variable_name}",
      "examples": ["${coin_count}", "${target_npc}", "${last_position}"],
      "usage_notes": "Can be used in most property values to reference variables"
    },
    
    "list_reference": {
      "description": "Reference to a list in PSC",
      "format": "list_name",
      "examples": ["loot_items", "target_npcs", "bank_locations"],
      "usage_notes": "Used with IS_IN_LIST operator"
    },
    
    "time_duration": {
      "description": "Duration of time in milliseconds",
      "format": "Integer milliseconds",
      "examples": [500, 1000, 5000, 60000],
      "usage_notes": "Used for sleep times, timeouts, and timers"
    },
    
    "percentage": {
      "description": "Percentage value between 0 and 100",
      "format": "Integer 0-100",
      "examples": [25, 50, 75, 100],
      "usage_notes": "Used for health percentages, probability, etc."
    },
    
    "action_name": {
      "description": "Name of an interaction action",
      "format": "Simple string",
      "examples": ["Attack", "Talk-to", "Chop down", "Mine", "Pick"],
      "usage_notes": "Used for specifying interaction with NPCs, objects, etc."
    },
    
    "filter_condition": {
      "description": "Complex filter structure for entity filtering",
      "format": "Object with class, logic, type, operator, and value",
      "examples": [
        {
          "class": "Item",
          "logic": "NONE",
          "type": "NAME",
          "operator": "EQUALS",
          "value": "Bones"
        },
        {
          "class": "NPC",
          "logic": "AND",
          "conditions": [
            {"type": "NAME", "operator": "EQUALS", "value": "Man"},
            {"type": "LEVEL", "operator": "LESS_THAN", "value": "10"}
          ]
        }
      ]
    },
    
    "comparison": {
      "description": "Comparison structure for numeric comparisons",
      "format": "Object with class, operator, and value",
      "examples": [
        {
          "class": "Number",
          "operator": "GREATER_THAN",
          "value": "10"
        },
        {
          "class": "Number",
          "operator": "EQUALS",
          "value": "100"
        }
      ]
    },
    
    "color": {
      "description": "ARGB color value for text or drawing actions",
      "format": "Integer representing ARGB values",
      "examples": [-65536],
      "special_values": {
        "-1": "Often represents default color"
      }
    },
    
    "enum_values": {
      "description": "Enumeration values for specific game elements",
      "subtypes": {
        "ActionMode": {
          "description": "Attack option mode settings",
          "values": ["ALWAYS_RIGHT_CLICK", "HIDDEN", "LEFT_CLICK_WHERE_AVAILABLE", "DEPENDS_ON_COMBAT_LEVELS"],
          "api_reference": "org.dreambot.api.data.ActionMode"
        },
        "ClientLayout": {
          "description": "Game client layout options",
          "values": ["FIXED_CLASSIC", "RESIZABLE_CLASSIC", "RESIZABLE_MODERN"]
        },
        "Skill": {
          "description": "Game skills",
          "values": ["ATTACK", "DEFENCE", "STRENGTH", "HITPOINTS", "RANGED", "PRAYER", "MAGIC", "COOKING", "WOODCUTTING", "FLETCHING", "FISHING", "FIREMAKING", "CRAFTING", "SMITHING", "MINING", "HERBLORE", "AGILITY", "THIEVING", "SLAYER", "FARMING", "RUNECRAFTING", "HUNTER", "CONSTRUCTION"],
          "api_reference": "org.dreambot.api.methods.skills.Skill"
        },
        "Spellbook": {
          "description": "Magic spellbooks",
          "values": ["NORMAL", "ANCIENT", "LUNAR", "ARCEUUS"],
          "api_reference": "org.dreambot.api.methods.magic.Spellbook"
        },
        "Tab": {
          "description": "Game interface tabs",
          "values": ["COMBAT", "STATS", "QUESTS", "INVENTORY", "EQUIPMENT", "PRAYER", "MAGIC", "CLAN_CHAT", "FRIENDS", "ACCOUNT", "LOGOUT", "OPTIONS", "EMOTES", "MUSIC"],
          "api_reference": "org.dreambot.api.methods.tabs.Tab"
        }
      }
    },
    
    "area": {
      "description": "Game world area definition",
      "formats": {
        "rectangle": {
          "description": "Rectangular area defined by SW and NE corners",
          "format": "Two coordinate pairs",
          "example": "(3200, 3200) to (3210, 3210)"
        },
        "polygon": {
          "description": "Polygon area defined by multiple points",
          "format": "Series of coordinate pairs",
          "example": "(3200, 3200), (3210, 3200), (3210, 3210), (3200, 3210)"
        },
        "radius": {
          "description": "Circular area defined by center point and radius",
          "format": "Center coordinate pair and radius in tiles",
          "example": "Center: (3200, 3200), Radius: 5"
        }
      }
    }
  },
  
  "common_properties": {
    "Filter Item By": {
      "type": "filter_condition",
      "description": "Criteria to select an item (inventory/bank). Accepts an object defining an Item filter.",
      "allowed_values": "Any valid Item filter JSON (see Filter Types library).",
      "examples": [
        {
          "class": "Item",
          "logic": "NONE",
          "type": "NAME",
          "operator": "CONTAINS",
          "value": "potion"
        }
      ]
    },
    
    "Filter NPC By": {
      "type": "filter_condition",
      "description": "Criteria to select an NPC. Given as an NPC filter object.",
      "allowed_values": "Any valid NPC filter JSON.",
      "examples": [
        {
          "class": "NPC",
          "logic": "NONE",
          "type": "ID",
          "operator": "EQUALS",
          "value": 3310
        }
      ]
    },
    
    "Filter Object By": {
      "type": "filter_condition",
      "description": "Criteria to select a Game Object.",
      "allowed_values": "Any valid GameObject filter JSON.",
      "examples": [
        {
          "class": "GameObject",
          "logic": "NONE",
          "type": "NAME",
          "operator": "EQUALS",
          "value": "Door"
        }
      ]
    },
    
    "Filter By": {
      "type": "filter_condition",
      "description": "Criteria to filter an entity (used for classes like Projectile, GraphicsObject, etc.).",
      "allowed_values": "Filter JSON corresponding to context (Projectile, GraphicsObject, etc.).",
      "examples": [
        {
          "class": "Projectile",
          "logic": "NONE",
          "type": "ID",
          "operator": "EQUALS",
          "value": 1181
        }
      ]
    },
    
    "Filter Player By": {
      "type": "filter_condition",
      "description": "Criteria to select a Player (other or local).",
      "allowed_values": "Any valid Player filter JSON.",
      "examples": [
        {
          "class": "Player",
          "logic": "NONE",
          "type": "NAME",
          "operator": "EQUALS",
          "value": "Zezima"
        }
      ]
    },
    
    "Filter Value By": {
      "type": "filter_condition",
      "description": "Condition on a variable's value (used in logic/loop actions).",
      "allowed_values": "Variable filter JSON (e.g. Variable equals something). Typically uses `class: Variable` with AS_TEXT/AS_NUMBER etc.",
      "examples": [
        {
          "class": "Variable",
          "logic": "NONE",
          "type": "AS_NUMBER",
          "operator": "GREATER_THAN",
          "value": "0"
        }
      ]
    },
    
    "Amount": {
      "description": "Quantity of items to withdraw/deposit/drop",
      "type": "numeric.integer or string",
      "valid_values": ["Any positive integer", "All"],
      "examples": [1, 5, 10, 28, "All"]
    },
    
    "Minimum": {
      "description": "Minimum value for ranges (sleep, random number, etc.)",
      "type": "numeric.integer",
      "valid_values": ["Any non-negative number"],
      "examples": [500, 1000, 2000]
    },
    
    "Maximum": {
      "description": "Maximum value for ranges (sleep, random number, etc.)",
      "type": "numeric.integer",
      "valid_values": ["Any number greater than Minimum"],
      "examples": [1000, 2000, 5000]
    },
    
    "Mean": {
      "description": "Mean value for normal distribution",
      "type": "numeric.integer",
      "valid_values": ["Any positive number"],
      "examples": [500, 1000, 2000]
    },
    
    "Variance": {
      "description": "Variance value for normal distribution",
      "type": "numeric.integer",
      "valid_values": ["Any positive number"],
      "examples": [100, 200, 500]
    },
    
    "Timer name": {
      "description": "Name identifier for timers",
      "type": "string.simple",
      "valid_values": ["Any text without spaces"],
      "examples": ["bank_timer", "combat_timer", "antiban_timer"]
    },
    
    "Time": {
      "description": "Duration in milliseconds",
      "type": "numeric.integer",
      "valid_values": ["Any positive number"],
      "examples": [1000, 60000, 300000]
    },
    
    "Variable name": {
      "type": "string.simple",
      "description": "Name of a variable (used in variable actions, loops, etc.). Case-sensitive match to PSC variable names.",
      "valid_values": ["Any string (should match a defined variable name or define a new one)"],
      "examples": ["Count", "target_npc", "last_position"]
    },
    
    "Value": {
      "type": "text/number",
      "description": "A literal value input (commonly used in Set Variable or Config actions).",
      "valid_values": "Depending on context: could be text or number. For config varbits, often numeric; for variables, could be any.",
      "examples": [42, "String value", true]
    },
    
    "List name": {
      "type": "string.simple",
      "description": "Name of a List variable.",
      "valid_values": ["Any string (should match an existing List variable or create one)"],
      "examples": ["Targets", "loot_items", "bank_locations"]
    },
    
    "Map name": {
      "type": "string.simple",
      "description": "Name of a Map variable.",
      "valid_values": ["Any string (map variable identifier)"],
      "examples": ["ItemPrices"]
    },
    
    "Key": {
      "type": "string.simple",
      "description": "Key name (for map operations).",
      "valid_values": ["Any string (must match type of keys used in the map)"],
      "examples": ["Swordfish"]
    },
    
    "X": {
      "type": "numeric.integer",
      "description": "X-coordinate (typically for Tile or Area definitions).",
      "valid_values": ["Any valid game world coordinate"],
      "examples": [3200, 3221, 3165]
    },
    
    "Y": {
      "type": "numeric.integer",
      "description": "Y-coordinate for a Tile.",
      "valid_values": ["Any valid game world coordinate"],
      "examples": [3200, 3218, 3489]
    },
    
    "Z": {
      "type": "numeric.integer",
      "description": "Plane level (0 = ground, 1 = first floor, etc.).",
      "valid_values": [0, 1, 2, 3],
      "examples": [0, 1]
    },
    
    "Area": {
      "type": "area",
      "description": "A defined area in the game world.",
      "valid_values": ["Usually specified by two tiles (SW and NE corners) or a radius. PSC UI allows drawing an area."],
      "examples": ["Area from (3200, 3200) to (3210, 3210)"]
    },
    
    "Duration": {
      "type": "time_duration",
      "description": "Time duration in milliseconds (for sleep/timer).",
      "valid_values": ["Integer >= 0 (0 often means no wait)"],
      "examples": [500, 1000, 5000, 60000]
    },
    
    "Message": {
      "type": "string.simple",
      "description": "Text message (for log, chat, etc.).",
      "valid_values": ["Any string. Can include field commands like var(...) to inject variables."],
      "examples": ["Hello, world!"]
    },
    
    "Color": {
      "type": "color",
      "description": "ARGB color value for text or drawing actions.",
      "valid_values": ["Integer representing color (Alpha-Red-Green-Blue). -1 often stands for default color."],
      "examples": [-65536]  // Red color
    },
    
    "Reverse order": {
      "type": "boolean",
      "description": "Flag (true/false) to reverse iteration order (for list loops).",
      "valid_values": [true, false],
      "default": false,
      "examples": [true]
    },
    
    "Random order": {
      "type": "boolean",
      "description": "Flag to randomize iteration order (for list loops).",
      "valid_values": [true, false],
      "default": false,
      "examples": [false]
    },
    
    "Thread name": {
      "type": "string.simple",
      "description": "Name of a script thread (for multithreading actions).",
      "valid_values": ["Any string (identifier for new thread)"],
      "examples": ["BackgroundWorker"]
    },
    
    "Schedule name": {
      "type": "string.simple",
      "description": "Name of a DreamBot Schedule to start.",
      "valid_values": ["Must match a configured Schedule name in DreamBot"],
      "examples": ["NightmareZoneSchedule"]
    },
    
    "Script name": {
      "type": "string.simple",
      "description": "Name of a DreamBot script to start.",
      "valid_values": ["Must match an installed script name"],
      "examples": ["WoodcutterPro"]
    },
    
    "Mode": {
      "type": "enum_values.ActionMode",
      "description": "Attack option mode setting (for NPC/Player attack options).",
      "valid_values": ["ALWAYS_RIGHT_CLICK", "HIDDEN", "LEFT_CLICK_WHERE_AVAILABLE", "DEPENDS_ON_COMBAT_LEVELS"],
      "examples": ["ALWAYS_RIGHT_CLICK"]
    },
    
    "Layout": {
      "type": "enum_values.ClientLayout",
      "description": "Game client layout mode.",
      "valid_values": ["FIXED_CLASSIC", "RESIZABLE_CLASSIC", "RESIZABLE_MODERN"],
      "examples": ["FIXED_CLASSIC"]
    },
    
    "Skill": {
      "type": "enum_values.Skill",
      "description": "A skill identifier (used in skill tracker or XP check actions).",
      "valid_values": ["ATTACK", "DEFENCE", "STRENGTH", "HITPOINTS", "RANGED", "PRAYER", "MAGIC", "COOKING", "WOODCUTTING", "FLETCHING", "FISHING", "FIREMAKING", "CRAFTING", "SMITHING", "MINING", "HERBLORE", "AGILITY", "THIEVING", "SLAYER", "FARMING", "RUNECRAFTING", "HUNTER", "CONSTRUCTION"],
      "examples": ["AGILITY"]
    },
    
    "Spellbook": {
      "type": "enum_values.Spellbook",
      "description": "Magic spellbook (used in magic actions or checks).",
      "valid_values": ["NORMAL", "ANCIENT", "LUNAR", "ARCEUUS"],
      "examples": ["NORMAL"]
    },
    
    "Tab": {
      "type": "enum_values.Tab",
      "description": "Game interface tab (for opening tabs).",
      "valid_values": ["COMBAT", "STATS", "QUESTS", "INVENTORY", "EQUIPMENT", "PRAYER", "MAGIC", "CLAN_CHAT", "FRIENDS", "ACCOUNT", "LOGOUT", "OPTIONS", "EMOTES", "MUSIC"],
      "examples": ["INVENTORY"]
    },
    
    "brightness": {
      "type": "numeric.integer",
      "description": "Game brightness setting level.",
      "valid_values": [0, 1, 2, 3, 4],
      "notes": "0 (Darkest) to 4 (Brightest). In practice OSRS has 4 levels (0-3 or 1-4 depending on how counted).",
      "examples": [2]
    },
    
    "Varbit": {
      "type": "text/number",
      "description": "Varbit or config ID to check/set (usually number, but PSC may treat it as text input).",
      "valid_values": ["OSRS varbit ID or config index (as number or string)"],
      "examples": [3004]
    },
    
    "Find": {
      "type": "string.simple",
      "description": "Substring or pattern to find (in text replacement actions).",
      "valid_values": ["String. (Exact substring; PSC does not support regex unless documented)"],
      "examples": ["dragon"]
    },
    
    "Replace with": {
      "type": "string.simple",
      "description": "Replacement text for find/replace actions.",
      "valid_values": ["String"],
      "examples": ["Dragon"]
    },
    
    "Bank Type": {
      "type": "string.simple",
      "description": "Type of bank to interact with",
      "valid_values": ["Bank booth", "Bank chest", "Deposit box"],
      "examples": ["Bank booth", "Bank chest"]
    },
    
    "Noted": {
      "type": "boolean",
      "description": "Whether to withdraw items in noted form",
      "valid_values": [true, false],
      "examples": [true, false]
    },
    
    "Comparison": {
      "type": "string.simple",
      "description": "Comparison operator for numeric comparisons",
      "valid_values": ["EQUALS", "NOT_EQUALS", "GREATER_THAN", "LESS_THAN", "GREATER_THAN_EQUALS", "LESS_THAN_EQUALS"],
      "examples": ["EQUALS", "GREATER_THAN"]
    },
    
    "health": {
      "type": "comparison",
      "description": "Health percentage comparison",
      "valid_values": ["Valid comparison for numeric values"],
      "examples": [
        {
          "class": "Number",
          "operator": "LESS_THAN",
          "value": "50"
        }
      ]
    },
    
    "distance": {
      "type": "comparison",
      "description": "Distance comparison",
      "valid_values": ["Valid comparison for numeric values"],
      "examples": [
        {
          "class": "Number",
          "operator": "LESS_THAN",
          "value": "10"
        }
      ]
    },
    
    "number": {
      "type": "comparison",
      "description": "Generic number comparison",
      "valid_values": ["Valid comparison for numeric values"],
      "examples": [
        {
          "class": "Number",
          "operator": "EQUALS",
          "value": "100"
        }
      ]
    },
    
    "Widget ID": {
      "type": "numeric.integer",
      "description": "Parent widget ID for UI elements",
      "valid_values": ["Valid widget interface ID"],
      "examples": [548, 161, 162]
    },
    
    "Child ID": {
      "type": "numeric.integer",
      "description": "Child widget ID for UI elements",
      "valid_values": ["Valid widget child ID"],
      "examples": [1, 2, 3, 4]
    },
    
    "Action": {
      "type": "action_name",
      "description": "Action to perform on an entity",
      "valid_values": ["Valid action for the entity type"],
      "examples": ["Attack", "Talk-to", "Mine", "Chop down"]
    }
  },
  
  "value_formats": {
    "item_value_formats": {
      "description": "Formatting rules for item-related values",
      "examples": {
        "name": {
          "case_sensitive": false,
          "exact_match": true,
          "examples": ["Dragon bones", "Rune essence"]
        },
        "id": {
          "format": "Integer",
          "examples": [526, 995]
        },
        "amount": {
          "formats": ["Integer", "\"All\""],
          "examples": [1, 28, "All"]
        }
      }
    },
    
    "coordinate_formats": {
      "description": "Formatting rules for coordinate values",
      "examples": {
        "standard": {
          "format": "x: integer, y: integer, z: integer",
          "examples": {"x": 3221, "y": 3218, "z": 0}
        },
        "tile_object": {
          "format": "new Tile(x, y, z)",
          "examples": "new Tile(3221, 3218, 0)"
        }
      }
    },
    
    "time_formats": {
      "description": "Formatting rules for time values",
      "examples": {
        "milliseconds": {
          "format": "Integer",
          "examples": [500, 1000, 60000]
        },
        "formatted_time": {
          "format": "HH:MM:SS",
          "examples": ["12:30:00", "23:59:59"]
        }
      }
    },
    
    "variable_reference_formats": {
      "description": "Formatting rules for variable references",
      "examples": {
        "standard": {
          "format": "${variable_name}",
          "examples": ["${coin_count}", "${target_npc}"]
        },
        "java_format": {
          "format": "variables.get(\"variable_name\")",
          "examples": "variables.get(\"coin_count\")"
        }
      }
    }
  },
  
  "special_property_behaviors": {
    "variable_substitution": {
      "description": "Variable references are substituted with their values at runtime",
      "example": {
        "property": "Filter NPC By",
        "value": {
          "class": "NPC",
          "logic": "NONE",
          "type": "NAME",
          "operator": "EQUALS",
          "value": "${target_npc}"
        },
        "runtime_behavior": "At runtime, ${target_npc} is replaced with the current value of the target_npc variable"
      }
    },
    
    "amount_all": {
      "description": "The special value 'All' for Amount properties means the maximum possible amount",
      "example": {
        "property": "Amount",
        "value": "All",
        "runtime_behavior": "Translated to Integer.MAX_VALUE in Java code"
      }
    },
    
    "sleep_behavior": {
      "description": "Sleep actions pause script execution for the specified duration",
      "example": {
        "action": "SLEEP_BETWEEN",
        "properties": {
          "Minimum": "500",
          "Maximum": "1000"
        },
        "runtime_behavior": "Randomly selects a duration between 500 and 1000 milliseconds and pauses execution for that period"
      }
    },
    
    "list_references": {
      "description": "References to lists are resolved to the actual list contents at runtime",
      "example": {
        "property": "Filter Item By",
        "value": {
          "class": "Item",
          "logic": "NONE",
          "type": "NAME",
          "operator": "IS_IN_LIST",
          "value": "loot_items"
        },
        "runtime_behavior": "Checks if the item name is in the list identified by 'loot_items'"
      }
    }
  }
}