{
  "Script Controls": [
    {
      "id": 1,
      "name": "Show dialog message",
      "description": "Displays a popup dialog with the specified message.",
      "category": "Script Controls",
      "properties": [
        { "name": "Message", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Displays a system dialog box (no direct DreamBot API call).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 2,
      "name": "Show operating system notification",
      "description": "Shows a desktop notification with the given content.",
      "category": "Script Controls",
      "properties": [
        { "name": "Message", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Uses system notification (no direct DreamBot API; uses Java AWT or OS notification).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 3,
      "name": "Open URL",
      "description": "Opens the specified URL in the default web browser.",
      "category": "Script Controls",
      "properties": [
        { "name": "URL", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Uses Desktop.browse or DreamBot client to open the URL.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 4,
      "name": "Comment",
      "description": "Does nothing (used for adding comments or notes in the script).",
      "category": "Script Controls",
      "properties": [
        { "name": "Note", "type": "text" }
      ],
      "output": null,
      "api_mapping": "N/A (no API call, purely for script readability).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 5,
      "name": "Change Script",
      "description": "Stops the current PSC script and loads another specified PSC script.",
      "category": "Script Controls",
      "properties": [
        { "name": "Script Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Uses DreamBot's ScriptManager to stop this script and start the specified PSC script.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 6,
      "name": "Change DreamBot Script",
      "description": "Stops the current PSC script and starts a different DreamBot script by name.",
      "category": "Script Controls",
      "properties": [
        { "name": "DreamBot Script Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Uses DreamBot's API to stop the current script and launch the named DreamBot script.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 7,
      "name": "Start DreamBot Schedule",
      "description": "Starts a DreamBot Schedule (a sequence of scripts) if one is configured.",
      "category": "Script Controls",
      "properties": [
        { "name": "Schedule Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Invokes DreamBot's scheduling system to start the given schedule.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 8,
      "name": "Run inside actions on script stop",
      "description": "Defines a block of actions that will execute when the script is stopped.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (container that PSC executes on script termination).",
      "valid_parents": ["None (top-level only)"],
      "valid_children": ["Any"]
    },
    {
      "id": 9,
      "name": "Stop Script",
      "description": "Immediately stops the running PSC script or automation.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Calls DreamBot's ScriptManager.stop() to terminate the script.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 10,
      "name": "Stop Pandemic's Script Creator",
      "description": "Stops the Pandemic's Script Creator script itself (useful if PSC is running within another script environment).",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Calls the PSC script's stop routine (similar to stopping the script in DreamBot).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 11,
      "name": "Close DreamBot Client",
      "description": "Closes the entire DreamBot client application.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Invokes Client.close() or system exit to shut down the client.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 12,
      "name": "Create label",
      "description": "Creates a labeled checkpoint in the script that can be jumped to.",
      "category": "Script Controls",
      "properties": [
        { "name": "Label Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "N/A (internal script label, no DreamBot API).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 13,
      "name": "Go to label",
      "description": "Jumps execution to the specified label in the script.",
      "category": "Script Controls",
      "properties": [
        { "name": "Label Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "N/A (script flow control, changes script pointer to the label).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 14,
      "name": "Return to start of script",
      "description": "Loops back to the beginning of the script actions.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (jumps script execution to start, equivalent to a loop).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 15,
      "name": "Block scheduled stop",
      "description": "Prevents a pending scheduled stop from stopping the script (cancels the scheduled stop).",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (internal PSC scheduler control).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 16,
      "name": "Allow scheduled stop",
      "description": "Re-allows the script to be stopped by a scheduled stop (if it was blocked).",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (internal PSC scheduler control).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 17,
      "name": "Pause Item Tracker",
      "description": "Pauses the tracking of item gains/losses (looting tracker) in the script.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (PSC internal tracking control).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 18,
      "name": "Resume Item Tracker",
      "description": "Resumes the item gains/losses tracker if it was paused.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (PSC internal tracking control).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 19,
      "name": "Logout",
      "description": "Logs the player out of the game to the login screen.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Uses DreamBot Tabs.logout() or similar to log out the player.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 20,
      "name": "Enable mouse input",
      "description": "Re-enables user mouse input control (if it was disabled by the script).",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Calls Client.setMouseInputEnabled(true) in DreamBot API.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 21,
      "name": "Disable mouse input",
      "description": "Disables user mouse input, handing exclusive control to the script.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Calls Client.setMouseInputEnabled(false) in DreamBot API.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 22,
      "name": "Enable keyboard input",
      "description": "Re-enables user keyboard input (if previously disabled by the script).",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Calls Client.setKeyboardInputEnabled(true) in DreamBot API.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 23,
      "name": "Disable keyboard input",
      "description": "Disables user keyboard input so the script can send keys exclusively.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Calls Client.setKeyboardInputEnabled(false) in DreamBot API.",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 24,
      "name": "Start new thread",
      "description": "Starts a new concurrent script thread (another action sequence running in parallel).",
      "category": "Script Controls",
      "properties": [
        { "name": "Thread Name", "type": "text" },
        { "name": "Repeat until stopped", "type": "boolean" },
        { "name": "Sleep between runs (ms)", "type": "number" }
      ],
      "output": null,
      "api_mapping": "Uses a separate internal thread to run the specified actions (no direct DreamBot API, uses Java Thread).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 25,
      "name": "Stop thread",
      "description": "Stops a running custom thread gracefully at its next checkpoint.",
      "category": "Script Controls",
      "properties": [
        { "name": "Thread Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Signals the named PSC thread to stop (internal thread management).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 26,
      "name": "Stop thread immediately",
      "description": "Force-stops a running custom thread immediately.",
      "category": "Script Controls",
      "properties": [
        { "name": "Thread Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Forcibly terminates the named PSC thread (internal thread interrupt).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 27,
      "name": "Pause script thread",
      "description": "Pauses the main script's execution thread (script will halt until resumed).",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Invokes ScriptManager.pause() on the main script thread (internal PSC control).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 28,
      "name": "Resume script thread",
      "description": "Resumes the main script if it was paused.",
      "category": "Script Controls",
      "properties": [],
      "output": null,
      "api_mapping": "Invokes ScriptManager.resume() on the main script thread (internal PSC control).",
      "valid_parents": ["Any"],
      "valid_children": []
    }
  ],
  "Logic & Conditions": [
    {
      "id": 29,
      "name": "If never fired before",
      "description": "This branch will fire only once per script run (the first time it’s reached).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Uses an internal flag to check if this block has executed before (no direct API).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 30,
      "name": "If logged in",
      "description": "This branch will fire if the player is currently logged into the game.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks DreamBot’s Client.getGameState() for LOGGED_IN state.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 31,
      "name": "If not logged in",
      "description": "This branch fires if the player is not currently logged in (at login screen or disconnected).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks for game state != LOGGED_IN via DreamBot’s client game state.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 32,
      "name": "If game state is",
      "description": "This branch fires if the game’s state matches the specified state (e.g., LOGGED_IN, LOGGING_IN, etc).",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "State", "type": "game state" }
      ],
      "output": null,
      "api_mapping": "Checks Client.getGameState() against the specified state.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 33,
      "name": "If game message matches",
      "description": "This branch will fire if a recent in-game chat message matches the given text pattern.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Message Text", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Checks recent chat messages via DreamBot’s Chatbox for a matching string.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 34,
      "name": "If a break is ready to start",
      "description": "This branch fires if a scheduled break (auto-pause) is currently due to start.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Uses PSC’s internal break scheduler status (no direct API).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 35,
      "name": "If a break is not ready to start",
      "description": "This branch fires if no scheduled break is currently due (the next break isn’t ready yet).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Uses PSC’s internal break scheduler status.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 36,
      "name": "If scheduled stop is pending",
      "description": "This branch fires if a scheduled stop request is pending for the script.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks PSC’s internal flag if a scheduled script termination is queued.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 37,
      "name": "If scheduled stop is not pending",
      "description": "This branch fires if there is no scheduled stop request pending.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks PSC’s internal scheduled stop flag (negated).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 38,
      "name": "If running via PSC Pro Tools",
      "description": "This branch fires if the script is running under PSC’s Pro Tools mode (advanced integration).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks an internal context flag for PSC Pro Tools usage.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 39,
      "name": "If game tick has changed",
      "description": "This branch fires if a new game tick occurred since the last check (game state update).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Compares current Client.getGameTick() to a stored tick value to detect change.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 40,
      "name": "If random number is",
      "description": "This branch will fire based on a random chance check (compares a generated random number to the threshold).",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Chance (%)", "type": "number" }
      ],
      "output": null,
      "api_mapping": "Uses Math.random or Random to generate a number and compares to the given percentage.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 41,
      "name": "If time is between",
      "description": "This branch fires if the current time (system clock) is between two specified times (e.g., between 22:00 and 06:00).",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Start Time (HH:MM)", "type": "text" },
        { "name": "End Time (HH:MM)", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Checks system time against the provided range.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 42,
      "name": "If mouse input is enabled",
      "description": "This branch fires if the user's mouse input is currently enabled (not blocked by script).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks internal state of Client input (true if not disabled by script).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 43,
      "name": "If mouse input is not enabled",
      "description": "This branch fires if user mouse input is currently disabled (script has control of mouse).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks the Client’s mouse input enabled flag (expecting false).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 44,
      "name": "If keyboard input is enabled",
      "description": "This branch fires if user keyboard input is currently enabled (not blocked by script).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks the Client’s keyboard input flag (true if user input allowed).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 45,
      "name": "If keyboard input is not enabled",
      "description": "This branch fires if user keyboard input is currently disabled.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "Checks the Client’s keyboard input flag (false if input blocked).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 46,
      "name": "Else",
      "description": "This branch will fire if the previous conditional action on the same level did not fire (an else case).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (control flow logic within PSC).",
      "valid_parents": ["If condition action"],
      "valid_children": ["Any"]
    },
    {
      "id": 47,
      "name": "Or",
      "description": "Allows the next condition to succeed if either the previous condition or the next one is true (logical OR between consecutive conditions).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (modifies script flow to combine conditions logically).",
      "valid_parents": ["If condition action"],
      "valid_children": []
    },
    {
      "id": 48,
      "name": "And",
      "description": "Allows the next condition to fire only if both the previous condition and the next condition are true (logical AND chaining).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (combines conditions in script logic).",
      "valid_parents": ["If condition action"],
      "valid_children": []
    },
    {
      "id": 49,
      "name": "If variable is set",
      "description": "This branch fires if the specified variable exists (has been set).",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Variable Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Checks PSC’s internal variable store for the existence of the named variable.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 50,
      "name": "If variable is not set",
      "description": "This branch fires if the specified variable does not exist or has not been set yet.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Variable Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Checks PSC’s variable storage for absence of the named variable.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 51,
      "name": "If variable matches",
      "description": "This branch fires if the specified variable’s value matches the given value.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Variable Name", "type": "text" },
        { "name": "Target Value", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Compares the variable’s stored value (as string/number) to the target value.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 52,
      "name": "If variable doesn't match",
      "description": "This branch fires if the specified variable’s value is not equal to the given value.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Variable Name", "type": "text" },
        { "name": "Target Value", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Compares the variable’s value to the target and fires if they differ.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 53,
      "name": "If variable has changed",
      "description": "This branch fires if the specified variable’s value has changed since the last time this was checked.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Variable Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Uses an internal snapshot of the variable’s last value to detect changes (no direct API).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 54,
      "name": "If value matches",
      "description": "This branch fires if a given value (or last action output) matches the specified value.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Value A", "type": "text" },
        { "name": "Value B", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Compares two provided values or a value against the last action output.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 55,
      "name": "If value doesn't match",
      "description": "This branch fires if a given value (or last output) is not equal to the specified value.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Value A", "type": "text" },
        { "name": "Value B", "type": "text" }
      ],
      "output": null,
      "api_mapping": "Compares two values and fires if they differ.",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    },
    {
      "id": 56,
      "name": "Return true",
      "description": "Returns true from the current custom action, immediately ending its execution successfully.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": true,
      "api_mapping": "N/A (signals PSC to return a boolean true in the custom action).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 57,
      "name": "Return false",
      "description": "Returns false from the current custom action, immediately ending its execution (as a failure/false).",
      "category": "Logic & Conditions",
      "properties": [],
      "output": false,
      "api_mapping": "N/A (signals PSC to return boolean false in the custom action).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 58,
      "name": "Set action output",
      "description": "Sets the return/output value of the current custom action to a specified value.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Output Value", "type": "text" }
      ],
      "output": null,
      "api_mapping": "N/A (stores the given value as the custom action’s output).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 59,
      "name": "Set action output to variable's value",
      "description": "Sets the output of the current custom action to the value of an existing variable.",
      "category": "Logic & Conditions",
      "properties": [
        { "name": "Variable Name", "type": "text" }
      ],
      "output": null,
      "api_mapping": "N/A (retrieves the variable’s value and stores it as the action’s output).",
      "valid_parents": ["Any"],
      "valid_children": []
    },
    {
      "id": 60,
      "name": "Return to start of custom action",
      "description": "Jumps back to the beginning of the current custom action, effectively looping its execution.",
      "category": "Logic & Conditions",
      "properties": [],
      "output": null,
      "api_mapping": "N/A (loops within the custom action’s execution flow).",
      "valid_parents": ["Any"],
      "valid_children": ["Any"]
    }
  ],
